import * as React from 'react'
import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import {styled} from '@stitches/react'
import { violet, mauve, indigo, purple, blackA, blue, gray, whiteA, green, blueDark, grayDark, orange } from '@radix-ui/colors';
import * as NavigationMenu from '@radix-ui/react-navigation-menu';
import {Table} from '@nextui-org/react'
import DatabaseState from '@/components/database-status'
import Image from 'next/image';
import product from '@/config/products';
import { useFlags } from 'launchdarkly-react-client-sdk';


const InventoryPage = () => {
const {dbTesting} = useFlags();
// retrieve data from postgres
const [inventory, setInventory] = React.useState<any>([])
const getInventory = async() => {
    try {
        const response = await fetch('/inventory');
		const jsonData = await response.json();
			setInventory(jsonData);
		} catch (error) {
			console.log('there was an error');
		}
    }

React.useEffect(() => {
    getInventory();
},[dbTesting])

const [orders, setOrders] = React.useState<any>([])
const getOrders = async() => {
    try {
        const response = await fetch('/form');
        const jsonData = await response.json();
        setOrders(jsonData);
    }
    catch (error) {
        console.log('there was an error');
    }
}

React.useEffect(() => {
    getOrders();
}, [dbTesting])

return (
<>
<Head>
        <title>The Toggle Store</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/osmo.png" />
</Head>
<header className={styles.header}>
    <NavigationMenuRoot>
        <Image 
        src = '/images/ld-logo.png' 
        alt = 'LaunchDarkly Logo'
        width={160}
        height={25}
        quality={100}
        style={{margin: 2, position: 'initial'}}
        />
        <NavigationMenuList>
            <NavigationMenu.Item>
          <NavigationMenuLink href='/'>Home</NavigationMenuLink>
        </NavigationMenu.Item>
        </NavigationMenuList>

    </NavigationMenuRoot>
</header>
<main className={styles.main}>
    <h1 style={{fontFamily: 'inter', padding: '10px'}}>Current Inventory</h1>
{dbTesting == 'postgres' ?    
<Table css={{height: "auto", width: '1250px', backgroundColor:'white', alignContent:'right', fontFamily: 'inter'}} selectionMode="single">
<Table.Header> 
    <Table.Column>TOGGLE NAME</Table.Column>
    <Table.Column>PRICE</Table.Column>
    <Table.Column>DESCRIPTION</Table.Column>
    <Table.Column>CURRENT INVENTORY</Table.Column>
    <Table.Column>OUTSTANDING ORDERS</Table.Column>
   </Table.Header>
<Table.Body>
{inventory.map((inventory: any) => (
    <Table.Row key='1'>
        <Table.Cell>{inventory.toggle_name}</Table.Cell>
        <Table.Cell>{inventory.price}</Table.Cell>
        <Table.Cell>{inventory.description}</Table.Cell>
        <Table.Cell>{Math.floor(Math.random() * 100)}</Table.Cell>
        <Table.Cell>{Math.floor(Math.random() * 10)}</Table.Cell>
    </Table.Row>
))
}
</Table.Body>
</Table>
: 
<Table css={{height: "auto", width: '500px', backgroundColor:'white', alignContent:'center', fontFamily: 'inter'}} selectionMode="single">
<Table.Header> 
    <Table.Column>TOGGLE NAME</Table.Column>
    <Table.Column>PRICE</Table.Column>
    <Table.Column>CURRENT INVENTORY</Table.Column>
   </Table.Header>
<Table.Body>
{product.map((product: any) => (
    <Table.Row key='1'>
        <Table.Cell>{product.name}</Table.Cell>
        <Table.Cell>{product.table_price}</Table.Cell>
        <Table.Cell>{product.inventory}</Table.Cell>
    </Table.Row>
))
}
</Table.Body>
</Table> }
<br></br>
<h1 style={{fontFamily: 'inter', padding: '10px'}}>Current Orders</h1>
<Table css={{height: "auto", width: '500px', backgroundColor:'white', alignContent:'center', fontFamily: 'inter'}} selectionMode="single">
<Table.Header> 
    <Table.Column>NAME</Table.Column>
    <Table.Column>EMAIL</Table.Column>
   </Table.Header>
<Table.Body>
{orders.map((orders: any) => (
    <Table.Row key='1'>
        <Table.Cell>{orders.name}</Table.Cell>
        <Table.Cell>{orders.email}</Table.Cell>
    </Table.Row>
))
}
</Table.Body>
</Table>
</main>
<footer className={styles.footer} suppressHydrationWarning>  
        <DatabaseState />
</footer>
</>
);
}

const NavigationMenuRoot = styled(NavigationMenu.Root, {
  position: 'relative',
  display: 'flex',
  justifyContent: 'space-between',
  width: '100vw',
  zIndex: 0,
});

const NavigationMenuList = styled(NavigationMenu.List, {
  display: 'flex',
  justifyContent: 'space-between',
  backgroundColor: 'none',
  padding: 4,
  borderRadius: 6,
  listStyle: 'none',
  boxShadow: `0 2px 10px ${blackA.blackA7}`,
  margin: 0,
});

const itemStyles = {
  padding: '8px 12px',
  outline: 'none',
  userSelect: 'none',
  fontWeight: 500,
  lineHeight: 1,
  borderRadius: 4,
  fontSize: 15,
  fontFamily: 'inter',
  color: blueDark.blue10,
  '&:focus': { boxShadow: `0 0 0 2px ${blueDark.blue7}` },
  '&:hover': { backgroundColor: blueDark.blue3 },
};

const NavigationMenuTrigger = styled(NavigationMenu.Trigger, {
  all: 'unset',
  ...itemStyles,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'space-between',
  gap: 2,
});

const NavigationMenuLink = styled(NavigationMenu.Link, {
  ...itemStyles,
  display: 'block',
  textDecoration: 'none',
  fontSize: 15,
  lineHeight: 1,
});

export default InventoryPage;